$date
	Fri Apr 04 14:03:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module memory_TB $end
$var wire 8 ! port_out_15 [7:0] $end
$var wire 8 " port_out_14 [7:0] $end
$var wire 8 # port_out_13 [7:0] $end
$var wire 8 $ port_out_12 [7:0] $end
$var wire 8 % port_out_11 [7:0] $end
$var wire 8 & port_out_10 [7:0] $end
$var wire 8 ' port_out_09 [7:0] $end
$var wire 8 ( port_out_08 [7:0] $end
$var wire 8 ) port_out_07 [7:0] $end
$var wire 8 * port_out_06 [7:0] $end
$var wire 8 + port_out_05 [7:0] $end
$var wire 8 , port_out_04 [7:0] $end
$var wire 8 - port_out_03 [7:0] $end
$var wire 8 . port_out_02 [7:0] $end
$var wire 8 / port_out_01 [7:0] $end
$var wire 8 0 port_out_00 [7:0] $end
$var wire 8 1 data_out [7:0] $end
$var reg 8 2 address [7:0] $end
$var reg 1 3 clk $end
$var reg 8 4 data_in [7:0] $end
$var reg 8 5 port_in_00 [7:0] $end
$var reg 8 6 port_in_01 [7:0] $end
$var reg 8 7 port_in_15 [7:0] $end
$var reg 1 8 reset $end
$var reg 1 9 write $end
$scope module DUT $end
$var wire 8 : address [7:0] $end
$var wire 1 3 clk $end
$var wire 8 ; data_in [7:0] $end
$var wire 8 < port_in_00 [7:0] $end
$var wire 8 = port_in_01 [7:0] $end
$var wire 8 > port_in_02 [7:0] $end
$var wire 8 ? port_in_03 [7:0] $end
$var wire 8 @ port_in_04 [7:0] $end
$var wire 8 A port_in_05 [7:0] $end
$var wire 8 B port_in_06 [7:0] $end
$var wire 8 C port_in_07 [7:0] $end
$var wire 8 D port_in_08 [7:0] $end
$var wire 8 E port_in_09 [7:0] $end
$var wire 8 F port_in_10 [7:0] $end
$var wire 8 G port_in_11 [7:0] $end
$var wire 8 H port_in_12 [7:0] $end
$var wire 8 I port_in_13 [7:0] $end
$var wire 8 J port_in_14 [7:0] $end
$var wire 8 K port_in_15 [7:0] $end
$var wire 1 8 reset $end
$var wire 1 9 write $end
$var wire 8 L rw_data_out [7:0] $end
$var wire 8 M rom_data_out [7:0] $end
$var wire 8 N port_out_15 [7:0] $end
$var wire 8 O port_out_14 [7:0] $end
$var wire 8 P port_out_13 [7:0] $end
$var wire 8 Q port_out_12 [7:0] $end
$var wire 8 R port_out_11 [7:0] $end
$var wire 8 S port_out_10 [7:0] $end
$var wire 8 T port_out_09 [7:0] $end
$var wire 8 U port_out_08 [7:0] $end
$var wire 8 V port_out_07 [7:0] $end
$var wire 8 W port_out_06 [7:0] $end
$var wire 8 X port_out_05 [7:0] $end
$var wire 8 Y port_out_04 [7:0] $end
$var wire 8 Z port_out_03 [7:0] $end
$var wire 8 [ port_out_02 [7:0] $end
$var wire 8 \ port_out_01 [7:0] $end
$var wire 8 ] port_out_00 [7:0] $end
$var reg 8 ^ data_out [7:0] $end
$scope module output0 $end
$var wire 8 _ address [7:0] $end
$var wire 1 3 clk $end
$var wire 8 ` data_in [7:0] $end
$var wire 1 8 reset $end
$var wire 1 9 write $end
$var reg 8 a port_out_00 [7:0] $end
$var reg 8 b port_out_01 [7:0] $end
$var reg 8 c port_out_02 [7:0] $end
$var reg 8 d port_out_03 [7:0] $end
$var reg 8 e port_out_04 [7:0] $end
$var reg 8 f port_out_05 [7:0] $end
$var reg 8 g port_out_06 [7:0] $end
$var reg 8 h port_out_07 [7:0] $end
$var reg 8 i port_out_08 [7:0] $end
$var reg 8 j port_out_09 [7:0] $end
$var reg 8 k port_out_10 [7:0] $end
$var reg 8 l port_out_11 [7:0] $end
$var reg 8 m port_out_12 [7:0] $end
$var reg 8 n port_out_13 [7:0] $end
$var reg 8 o port_out_14 [7:0] $end
$var reg 8 p port_out_15 [7:0] $end
$upscope $end
$scope module read_and_write_mem $end
$var wire 1 9 WE $end
$var wire 8 q address [7:0] $end
$var wire 1 3 clk $end
$var wire 8 r data_in [7:0] $end
$var reg 1 s EN $end
$var reg 8 t data_out [7:0] $end
$upscope $end
$scope module read_only_mem $end
$var wire 8 u address [7:0] $end
$var wire 1 3 clk $end
$var parameter 8 v ADDAB_LDB $end
$var parameter 8 w ADD_AB $end
$var parameter 8 x AND_AB $end
$var parameter 8 y BCC $end
$var parameter 8 z BCS $end
$var parameter 8 { BEQ $end
$var parameter 8 | BMI $end
$var parameter 8 } BNE $end
$var parameter 8 ~ BPL $end
$var parameter 8 !" BRA $end
$var parameter 8 "" BVC $end
$var parameter 8 #" BVS $end
$var parameter 8 $" DECA $end
$var parameter 8 %" DECB $end
$var parameter 8 &" INCA $end
$var parameter 8 '" INCB $end
$var parameter 8 (" LDA_DIR $end
$var parameter 8 )" LDA_IMM $end
$var parameter 8 *" LDB_DIR $end
$var parameter 8 +" LDB_IMM $end
$var parameter 8 ," NOTA $end
$var parameter 8 -" NOTB $end
$var parameter 8 ." OR_AB $end
$var parameter 8 /" STA_DIR $end
$var parameter 8 0" STB_DIR $end
$var parameter 8 1" SUB_AB $end
$var parameter 8 2" XOR_AB $end
$var reg 1 3" EN $end
$var reg 8 4" data_out [7:0] $end
$scope begin ADDRESS_LIMITS $end
$upscope $end
$scope begin PROGRAM_CODE $end
$upscope $end
$upscope $end
$scope begin Multiplexing_to_Memory_Data_Bus $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1001010 2"
b1000011 1"
b10010111 0"
b10010110 /"
b1000101 ."
b1001100 -"
b1001011 ,"
b10001000 +"
b10001001 *"
b10000110 )"
b10000111 ("
b1000111 '"
b1000110 &"
b1001001 %"
b1001000 $"
b100101 #"
b100110 ""
b100000 !"
b100010 ~
b100100 }
b100001 |
b100011 {
b100111 z
b101000 y
b1000100 x
b1000010 w
b1001101 v
$end
#0
$dumpvars
bx 4"
13"
b0 u
bx t
0s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
bx ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
bx M
bx L
b11111111 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b10111011 =
b10101010 <
b0 ;
b0 :
09
08
b11111111 7
b10111011 6
b10101010 5
b0 4
03
b0 2
bx 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#500000
18
#1000000
b10000110 1
b10000110 ^
b10000110 M
b10000110 4"
13
#2000000
03
#2500000
03"
1s
bx 1
bx ^
19
b1010101 4
b1010101 ;
b1010101 `
b1010101 r
b10000010 2
b10000010 :
b10000010 _
b10000010 q
b10000010 u
#3000000
13
#4000000
03
#4500000
09
#5000000
b1010101 1
b1010101 ^
b1010101 L
b1010101 t
13
#6000000
03
#7000000
13
#8000000
03
#9000000
13
#10000000
03
#11000000
13
#12000000
03
#12500000
13"
0s
b10000110 1
b10000110 ^
b101 2
b101 :
b101 _
b101 q
b101 u
#13000000
b1001101 1
b1001101 ^
b1001101 M
b1001101 4"
13
#14000000
03
#15000000
13
#16000000
03
#16500000
03"
b10101010 1
b10101010 ^
b11110000 2
b11110000 :
b11110000 _
b11110000 q
b11110000 u
#17000000
13
#18000000
03
#19000000
13
#20000000
03
#20500000
b10111011 1
b10111011 ^
b11110001 2
b11110001 :
b11110001 _
b11110001 q
b11110001 u
#21000000
13
#22000000
03
#23000000
13
#24000000
03
#24500000
b11111111 1
b11111111 ^
b11111111 2
b11111111 :
b11111111 _
b11111111 q
b11111111 u
#25000000
13
#26000000
03
#27000000
13
#28000000
03
#28500000
19
b110011 4
b110011 ;
b110011 `
b110011 r
b11100000 2
b11100000 :
b11100000 _
b11100000 q
b11100000 u
#29000000
b110011 0
b110011 ]
b110011 a
13
#30000000
03
#30500000
09
#31000000
13
#32000000
03
#33000000
13
#34000000
03
#34500000
19
b1000100 4
b1000100 ;
b1000100 `
b1000100 r
b11100001 2
b11100001 :
b11100001 _
b11100001 q
b11100001 u
#35000000
b1000100 /
b1000100 \
b1000100 b
13
#36000000
03
#36500000
09
#37000000
13
#38000000
03
#39000000
13
#40000000
03
#40500000
19
b1110111 4
b1110111 ;
b1110111 `
b1110111 r
b11101111 2
b11101111 :
b11101111 _
b11101111 q
b11101111 u
#41000000
b1110111 !
b1110111 N
b1110111 p
13
#42000000
03
#42500000
09
#43000000
13
#44000000
03
#45000000
13
#46000000
03
#47000000
13
#47500000
